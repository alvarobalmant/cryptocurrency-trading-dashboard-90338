import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, barbershopId, conversationHistory = [], sessionId = null } = await req.json();
    
    console.log('üì® Nova mensagem:', { message, barbershopId });

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const [barbershopData, servicesData, employeesData] = await Promise.all([
      supabase.from('barbershops').select('*').eq('id', barbershopId).single(),
      supabase.from('services').select('*').eq('barbershop_id', barbershopId).eq('active', true),
      supabase.from('employees').select('*').eq('barbershop_id', barbershopId).eq('status', 'active')
    ]);

    const barbershop = barbershopData.data;
    const services = servicesData.data || [];
    const employees = employeesData.data || [];

    // ============= HOR√ÅRIO DE BRAS√çLIA =============
    const now = new Date();
    const brasiliaOffset = -3 * 60;
    const utcOffset = now.getTimezoneOffset();
    const brasiliaTime = new Date(now.getTime() + (brasiliaOffset - utcOffset) * 60000);
    
    const currentDate = brasiliaTime.toISOString().split('T')[0];
    const currentTime = brasiliaTime.toTimeString().split(' ')[0].substring(0, 5);
    const dayOfWeek = brasiliaTime.getDay();
    
    const brasiliaDateFormatted = new Intl.DateTimeFormat('pt-BR', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric',
      timeZone: 'America/Sao_Paulo'
    }).format(brasiliaTime);

    console.log('‚è∞ Hor√°rio de Bras√≠lia:', { brasiliaDateFormatted, currentDate, currentTime, dayOfWeek });

    // ============================================
    // RECUPERAR DATA DA SESS√ÉO + LIMPEZA 24H
    // ============================================
    let sessionDate: string | null = null;

    if (sessionId) {
      const { data: session } = await supabase
        .from('chat_sessions')
        .select('current_appointment_date, last_message_at, session_data')
        .eq('id', sessionId)
        .maybeSingle();
      
      if (session) {
        // Verificar se sess√£o expirou (24h de inatividade)
        const lastMessageAt = new Date(session.last_message_at || 0);
        const hoursSinceLastMessage = (now.getTime() - lastMessageAt.getTime()) / (1000 * 60 * 60);
        
        if (hoursSinceLastMessage > 24) {
          console.log(`üßπ Sess√£o expirada (${hoursSinceLastMessage.toFixed(1)}h de inatividade) - Limpando dados`);
          
          // Limpar dados expirados
          await supabase
            .from('chat_sessions')
            .update({ 
              current_appointment_date: null,
              session_data: {},
              status: 'expired'
            })
            .eq('id', sessionId);
          
          sessionDate = null;
        } else if (session.current_appointment_date) {
          // Verificar se data armazenada j√° passou
          const storedDate = new Date(session.current_appointment_date);
          const today = new Date(currentDate);
          
          if (storedDate < today) {
            console.log(`üßπ Data armazenada est√° no passado (${session.current_appointment_date}) - Limpando`);
            
            await supabase
              .from('chat_sessions')
              .update({ current_appointment_date: null })
              .eq('id', sessionId);
            
            sessionDate = null;
          } else {
            sessionDate = session.current_appointment_date;
            console.log(`üìÖ Data recuperada da sess√£o: ${sessionDate}`);
          }
        } else {
          console.log('üìÖ Nenhuma data na sess√£o');
        }
      }
    }

    // ============= GUARD: EXTRA√á√ÉO FOR√áADA DE INFORMA√á√ïES =============
    const lowerMessage = message.toLowerCase();
    
    // Extra√ß√£o de hor√°rio - m√∫ltiplos formatos
    let extractedTime: string | null = null;

    // Padr√µes de hor√°rio (ordem importa - mais espec√≠ficos primeiro!)
    const timePatterns = [
      // Hor√°rios por extenso (mais espec√≠ficos)
      /meio[- ]?dia/i,
      /meia[- ]?noite/i,
      
      // "quatro da tarde", "nove da manh√£" (por extenso + per√≠odo)
      /(uma|duas|tr√™s|tres|quatro|cinco|seis|sete|oito|nove|dez|onze|doze)\s+da\s+(manh√£|manha|tarde|noite)/i,
      
      // "√†s 4 da tarde", "as 4 da manh√£", "4 da noite" (n√∫mero + per√≠odo) - CR√çTICO: vem antes do gen√©rico
      /(?:√†s?|as|a)?\s*(\d{1,2})\s+da\s+(manh√£|manha|tarde|noite)/i,
      
      // "16h", "16h30", "16:30"
      /(\d{1,2})[h:](\d{2})/i,
      
      // "16 horas", "4 horas"
      /(\d{1,2})\s*horas?/i,
      
      // "√†s 16", "as 16", "√† 16" (gen√©rico - √∫ltimo)
      /(?:√†s?|as|a)\s+(\d{1,2})(?::(\d{2}))?/i
    ];

    // Mapa de n√∫meros por extenso
    const numberWords: { [key: string]: number } = {
      'uma': 1, 'duas': 2, 'tr√™s': 3, 'tres': 3, 'quatro': 4,
      'cinco': 5, 'seis': 6, 'sete': 7, 'oito': 8, 'nove': 9,
      'dez': 10, 'onze': 11, 'doze': 12
    };

    // Tentar cada padr√£o
    for (const pattern of timePatterns) {
      const match = message.match(pattern);
      if (match) {
        // Meio-dia
        if (/meio[- ]?dia/i.test(match[0])) {
          extractedTime = '12:00';
          console.log('‚è∞ Hor√°rio extra√≠do (meio-dia): 12:00');
          break;
        }
        
        // Meia-noite
        if (/meia[- ]?noite/i.test(match[0])) {
          extractedTime = '00:00';
          console.log('‚è∞ Hor√°rio extra√≠do (meia-noite): 00:00');
          break;
        }
        
        // N√∫mero por extenso + per√≠odo
        if (match[1] && numberWords[match[1].toLowerCase()]) {
          let hour = numberWords[match[1].toLowerCase()];
          const period = match[2]?.toLowerCase();
          
          // Ajustar para formato 24h
          if (period === 'tarde' && hour < 12) {
            hour += 12;
          } else if (period === 'noite' && hour < 12) {
            hour += 12;
          }
          
          extractedTime = `${hour.toString().padStart(2, '0')}:00`;
          console.log(`‚è∞ Hor√°rio extra√≠do (por extenso): ${extractedTime}`);
          break;
        }
        
        // N√∫mero + per√≠odo do dia
        if (match[1] && /\d/.test(match[1]) && match[2]) {
          let hour = parseInt(match[1]);
          const period = match[2].toLowerCase();
          
          // Ajustar para formato 24h
          if ((period === 'tarde' || period === 'noite') && hour < 12) {
            hour += 12;
          } else if ((period === 'manh√£' || period === 'manha') && hour === 12) {
            hour = 0;
          }
          
          extractedTime = `${hour.toString().padStart(2, '0')}:00`;
          console.log(`‚è∞ Hor√°rio extra√≠do (com per√≠odo): ${extractedTime}`);
          break;
        }
        
        // Formato padr√£o: hora + minutos opcionais
        if (match[1] && /\d/.test(match[1])) {
          const hour = match[1].padStart(2, '0');
          const minute = (match[2] || '00').padStart(2, '0');
          extractedTime = `${hour}:${minute}`;
          console.log(`‚è∞ Hor√°rio extra√≠do: ${extractedTime}`);
          break;
        }
      }
    }

    // Validar se hor√°rio est√° em formato v√°lido
    if (extractedTime) {
      const [hour, minute] = extractedTime.split(':').map(Number);
      
      // Validar hora (0-23) e minuto (0-59)
      if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
        console.log('‚ö†Ô∏è Hor√°rio inv√°lido:', extractedTime);
        extractedTime = null;
      }
    }

    // Extrair funcion√°rio
    let extractedEmployee = null;
    for (const emp of employees) {
      const empNameLower = emp.name.toLowerCase();
      if (lowerMessage.includes(empNameLower)) {
        extractedEmployee = emp;
        console.log('üë§ Funcion√°rio extra√≠do:', emp.name);
        break;
      }
    }

    // ============================================
    // EXTRA√á√ÉO DE DATA COM PRIORIDADE INTELIGENTE
    // ============================================
    let extractedDate: string | null = null;
    let dateSource: string = '';

    // Helper: obter data a partir de dia da semana
    const getDateFromWeekday = (weekdayName: string): string | null => {
      const weekdays = ['domingo', 'segunda', 'segunda-feira', 'terca', 'ter√ßa', 'ter√ßa-feira', 'terca-feira', 
                        'quarta', 'quarta-feira', 'quinta', 'quinta-feira', 'sexta', 'sexta-feira', 
                        'sabado', 's√°bado', 's√°bado'];
      const weekdayMap: Record<string, number> = {
        'domingo': 0, 'segunda': 1, 'segunda-feira': 1, 'terca': 2, 'ter√ßa': 2, 'ter√ßa-feira': 2, 'terca-feira': 2,
        'quarta': 3, 'quarta-feira': 3, 'quinta': 4, 'quinta-feira': 4, 
        'sexta': 5, 'sexta-feira': 5, 'sabado': 6, 's√°bado': 6
      };
      
      const targetDay = weekdayMap[weekdayName.toLowerCase()];
      if (targetDay === undefined) return null;
      
      const today = brasiliaTime.getDay();
      let daysToAdd = targetDay - today;
      if (daysToAdd <= 0) daysToAdd += 7; // Pr√≥xima ocorr√™ncia
      
      const targetDate = new Date(brasiliaTime.getTime() + daysToAdd * 86400000);
      return targetDate.toISOString().split('T')[0];
    };

    // Helper: obter data a partir de dia do m√™s (ex: "dia 17")
    const getDateFromDay = (day: number): string | null => {
      const currentDay = brasiliaTime.getDate();
      const currentMonth = brasiliaTime.getMonth();
      const currentYear = brasiliaTime.getFullYear();
      
      let targetMonth = currentMonth;
      let targetYear = currentYear;
      
      // Se o dia j√° passou neste m√™s, usar pr√≥ximo m√™s
      if (day < currentDay) {
        targetMonth++;
        if (targetMonth > 11) {
          targetMonth = 0;
          targetYear++;
        }
      }
      
      const targetDate = new Date(targetYear, targetMonth, day);
      return targetDate.toISOString().split('T')[0];
    };

    // PRIORIDADE 1: Data expl√≠cita na mensagem atual
    if (/amanh[√£a]/i.test(message)) {
      extractedDate = new Date(brasiliaTime.getTime() + 86400000).toISOString().split('T')[0];
      dateSource = 'mensagem atual (amanh√£)';
      console.log(`üìÖ Data extra√≠da: ${extractedDate} (amanh√£)`);
      
    } else if (/depois\s+de\s+amanh[√£a]/i.test(message)) {
      extractedDate = new Date(brasiliaTime.getTime() + 172800000).toISOString().split('T')[0];
      dateSource = 'mensagem atual (depois de amanh√£)';
      console.log(`üìÖ Data extra√≠da: ${extractedDate} (depois de amanh√£)`);
      
    } else if (/hoje/i.test(message)) {
      extractedDate = currentDate;
      dateSource = 'mensagem atual (hoje)';
      console.log(`üìÖ Data extra√≠da: ${extractedDate} (hoje)`);
      
    } else {
      // Tentar extrair dia da semana (ex: "s√°bado", "pr√≥xima sexta")
      const weekdayMatch = message.match(/(?:pr√≥xim[oa]|essa|est[ea]|no|na)?\s*(domingo|segunda|ter√ßa|terca|quarta|quinta|sexta|s[√°a]bado)(?:\s*feira)?/i);
      if (weekdayMatch) {
        const weekdayDate = getDateFromWeekday(weekdayMatch[1]);
        if (weekdayDate) {
          extractedDate = weekdayDate;
          dateSource = `mensagem atual (${weekdayMatch[1]})`;
          console.log(`üìÖ Data extra√≠da: ${extractedDate} (${weekdayMatch[1]})`);
        }
      }
      
      // Tentar extrair dia do m√™s (ex: "dia 17", "no dia 25")
      if (!extractedDate) {
        const dayMatch = message.match(/(?:dia|no\s+dia)\s+(\d{1,2})/i);
        if (dayMatch) {
          const day = parseInt(dayMatch[1]);
          if (day >= 1 && day <= 31) {
            const dayDate = getDateFromDay(day);
            if (dayDate) {
              extractedDate = dayDate;
              dateSource = `mensagem atual (dia ${day})`;
              console.log(`üìÖ Data extra√≠da: ${extractedDate} (dia ${day})`);
            }
          }
        }
      }
    }

    // PRIORIDADE 2: Data da sess√£o (mant√©m contexto)
    // CR√çTICO: Se n√£o tem data expl√≠cita na mensagem, SEMPRE usar a sess√£o se dispon√≠vel
    if (!extractedDate && sessionDate) {
      extractedDate = sessionDate;
      dateSource = 'sess√£o (mantido)';
      console.log(`üìÖ Data mantida da sess√£o: ${extractedDate}`);
      console.log(`   ‚ÑπÔ∏è Esta data ser√° usada porque n√£o foi mencionada nova data na mensagem`);
    }
    
    // EXTRA: Se sessionDate existe mas extractedDate j√° foi definida da mensagem, avisar
    if (extractedDate && sessionDate && extractedDate !== sessionDate) {
      console.log(`‚ö†Ô∏è ATEN√á√ÉO: Data da mensagem (${extractedDate}) DIFERENTE da sess√£o (${sessionDate})`);
      console.log(`   ‚û°Ô∏è Usando data da mensagem (prioridade maior)`);
    }

    // PRIORIDADE 3: Buscar no hist√≥rico (√∫ltima men√ß√£o de data futura)
    if (!extractedDate) {
      for (const msg of [...conversationHistory].reverse()) {
        if (msg.role === 'user') {
          if (/amanh[√£a]/i.test(msg.content)) {
            extractedDate = new Date(brasiliaTime.getTime() + 86400000).toISOString().split('T')[0];
            dateSource = 'hist√≥rico (amanh√£)';
            console.log(`üìÖ Data do hist√≥rico: ${extractedDate} (amanh√£)`);
            break;
          } else if (/depois\s+de\s+amanh[√£a]/i.test(msg.content)) {
            extractedDate = new Date(brasiliaTime.getTime() + 172800000).toISOString().split('T')[0];
            dateSource = 'hist√≥rico (depois de amanh√£)';
            console.log(`üìÖ Data do hist√≥rico: ${extractedDate} (depois de amanh√£)`);
            break;
          }
          
          // Buscar dia da semana no hist√≥rico
          const weekdayMatch = msg.content.match(/(?:pr√≥xim[oa]|essa|est[ea]|no|na)?\s*(domingo|segunda|ter√ßa|terca|quarta|quinta|sexta|s[√°a]bado)(?:\s*feira)?/i);
          if (weekdayMatch) {
            const weekdayDate = getDateFromWeekday(weekdayMatch[1]);
            if (weekdayDate) {
              extractedDate = weekdayDate;
              dateSource = `hist√≥rico (${weekdayMatch[1]})`;
              console.log(`üìÖ Data do hist√≥rico: ${extractedDate} (${weekdayMatch[1]})`);
              break;
            }
          }
          
          // Buscar dia do m√™s no hist√≥rico
          const dayMatch = msg.content.match(/(?:dia|no\s+dia)\s+(\d{1,2})/i);
          if (dayMatch) {
            const day = parseInt(dayMatch[1]);
            if (day >= 1 && day <= 31) {
              const dayDate = getDateFromDay(day);
              if (dayDate) {
                extractedDate = dayDate;
                dateSource = `hist√≥rico (dia ${day})`;
                console.log(`üìÖ Data do hist√≥rico: ${extractedDate} (dia ${day})`);
                break;
              }
            }
          }
          // N√ÉO buscar "hoje" no hist√≥rico - pode estar desatualizado
        }
      }
    }

    // PRIORIDADE 4: Default = hoje (√∫ltimo recurso)
    if (!extractedDate) {
      extractedDate = currentDate;
      dateSource = 'default (hoje)';
      console.log(`üìÖ Data padr√£o: ${extractedDate} (hoje)`);
    }

    console.log(`üìä Fonte da data: ${dateSource}`);
    console.log(`üìä extractedDate final: ${extractedDate}`);
    console.log(`üìä sessionId: ${sessionId}`);

    // SALVAR DATA NA SESS√ÉO (sempre que tiver data extra√≠da, independente da fonte)
    if (sessionId && extractedDate && (dateSource.includes('mensagem atual') || dateSource.includes('sess√£o'))) {
      await supabase
        .from('chat_sessions')
        .update({ current_appointment_date: extractedDate })
        .eq('id', sessionId);
      
      console.log(`üíæ Data salva na sess√£o: ${extractedDate} (fonte: ${dateSource})`);
    } else {
      console.log(`‚ö†Ô∏è Data N√ÉO salva - sessionId: ${sessionId}, extractedDate: ${extractedDate}, fonte: ${dateSource}`);
    }

    // ============= VERIFICA√á√ÉO FOR√áADA DE DISPONIBILIDADE =============
    let serverSideAvailabilityResult = null;
    
    // BUSCAR FUNCION√ÅRIO NO HIST√ìRICO ANTES DE VERIFICAR DISPONIBILIDADE
    if (!extractedEmployee) {
      for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
        for (const emp of employees) {
          if (msg.content.toLowerCase().includes(emp.name.toLowerCase())) {
            extractedEmployee = emp;
            console.log('üë§ Funcion√°rio extra√≠do do hist√≥rico:', emp.name);
            break;
          }
        }
        if (extractedEmployee) break;
      }
    }
    
    if (extractedTime && extractedEmployee) {
      console.log('üîç GUARD: Verificando disponibilidade for√ßada:', { extractedDate, extractedTime, employee: extractedEmployee.name });
      
      const requestedDayOfWeek = new Date(extractedDate + 'T00:00:00').getDay();
      
      // Buscar hor√°rio de trabalho
      const { data: schedules } = await supabase
        .from('employee_schedules')
        .select('*')
        .eq('employee_id', extractedEmployee.id)
        .eq('day_of_week', requestedDayOfWeek)
        .eq('is_active', true);

      console.log('üìã Schedules:', schedules);

      if (!schedules || schedules.length === 0) {
        serverSideAvailabilityResult = {
          available: false,
          message: `‚ùå ${extractedEmployee.name} n√£o trabalha neste dia da semana.`
        };
        console.log('‚ùå Sem expediente');
      } else {
        const schedule = schedules[0];
        const startMinutes = parseInt(schedule.start_time.split(':')[0]) * 60 + parseInt(schedule.start_time.split(':')[1]);
        const endMinutes = parseInt(schedule.end_time.split(':')[0]) * 60 + parseInt(schedule.end_time.split(':')[1]);
        const requestedMinutes = parseInt(extractedTime.split(':')[0]) * 60 + parseInt(extractedTime.split(':')[1]);

        console.log('‚è∞ Compara√ß√£o:', { startMinutes, endMinutes, requestedMinutes });

        if (requestedMinutes < startMinutes || requestedMinutes >= endMinutes) {
          serverSideAvailabilityResult = {
            available: false,
            message: `‚ùå Este hor√°rio est√° fora do expediente. ${extractedEmployee.name} trabalha das ${schedule.start_time} √†s ${schedule.end_time}.`
          };
          console.log('‚ùå Fora do expediente');
        } else {
          // Verificar conflitos
          const defaultDuration = services.length === 1 ? services[0].duration_minutes : 60;
          const requestedEndMinutes = requestedMinutes + defaultDuration;

          const { data: conflicts } = await supabase
            .from('appointments')
            .select('*')
            .eq('employee_id', extractedEmployee.id)
            .eq('appointment_date', extractedDate)
            .neq('status', 'cancelled');

          console.log('üîç Agendamentos:', conflicts?.length || 0);

          let hasConflict = false;
          if (conflicts && conflicts.length > 0) {
            for (const appt of conflicts) {
              const apptStart = parseInt(appt.start_time.split(':')[0]) * 60 + parseInt(appt.start_time.split(':')[1]);
              const apptEnd = parseInt(appt.end_time.split(':')[0]) * 60 + parseInt(appt.end_time.split(':')[1]);

              if (
                (requestedMinutes >= apptStart && requestedMinutes < apptEnd) ||
                (requestedEndMinutes > apptStart && requestedEndMinutes <= apptEnd) ||
                (requestedMinutes <= apptStart && requestedEndMinutes >= apptEnd)
              ) {
                hasConflict = true;
                console.log('‚ö†Ô∏è Conflito:', appt);
                break;
              }
            }
          }

          if (hasConflict) {
            // Gerar alternativas
            const allSlots: string[] = [];
            for (let m = startMinutes; m + defaultDuration <= endMinutes; m += 20) {
              const slotTime = `${String(Math.floor(m / 60)).padStart(2, '0')}:${String(m % 60).padStart(2, '0')}`;
              const slotEndMinutes = m + defaultDuration;
              
              let isFree = true;
              if (conflicts) {
                for (const appt of conflicts) {
                  const apptStart = parseInt(appt.start_time.split(':')[0]) * 60 + parseInt(appt.start_time.split(':')[1]);
                  const apptEnd = parseInt(appt.end_time.split(':')[0]) * 60 + parseInt(appt.end_time.split(':')[1]);
                  
                  if (
                    (m >= apptStart && m < apptEnd) ||
                    (slotEndMinutes > apptStart && slotEndMinutes <= apptEnd) ||
                    (m <= apptStart && slotEndMinutes >= apptEnd)
                  ) {
                    isFree = false;
                    break;
                  }
                }
              }
              
              if (isFree) allSlots.push(slotTime);
            }

            if (allSlots.length > 0) {
              const alternatives = allSlots.slice(0, 3).join(', ');
              serverSideAvailabilityResult = {
                available: false,
                hasAlternatives: true,
                alternatives: allSlots.slice(0, 3),
                message: `‚ùå O hor√°rio ${extractedTime} j√° est√° ocupado. Hor√°rios dispon√≠veis com ${extractedEmployee.name}: ${alternatives}. Gostaria de agendar em um desses hor√°rios?`
              };
            } else {
              serverSideAvailabilityResult = {
                available: false,
                message: `‚ùå O hor√°rio ${extractedTime} est√° ocupado e n√£o h√° outros hor√°rios dispon√≠veis com ${extractedEmployee.name} neste dia.`
              };
            }
            console.log('‚ùå Hor√°rio ocupado');
          } else {
            serverSideAvailabilityResult = {
              available: true,
              time: extractedTime,
              date: extractedDate,
              employeeId: extractedEmployee.id,
              employeeName: extractedEmployee.name,
              message: services.length === 1 
                ? `‚úÖ √ìtimo! O hor√°rio ${extractedTime} com ${extractedEmployee.name} est√° dispon√≠vel. Para confirmar, preciso do seu nome completo e telefone.`
                : `‚úÖ √ìtimo! O hor√°rio ${extractedTime} com ${extractedEmployee.name} est√° dispon√≠vel. Para qual servi√ßo voc√™ gostaria de agendar?`
            };
            console.log('‚úÖ Hor√°rio dispon√≠vel');
          }
        }
      }
    }

    // ============================================
    // RECONHECIMENTO DE CLIENTE RECORRENTE (PRELIMINAR)
    // ============================================
    let clientProfile: any = null;
    let preliminaryPhone: string | null = null;
    let clientProfileId: string | null = null; // ‚úÖ ID do perfil para usar no agendamento

    // Tentar extrair telefone preliminarmente para buscar perfil
    for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
      if (msg.role === 'user') {
        const phoneMatch = msg.content.match(/(\d{10,11})/);
        if (phoneMatch) {
          const candidatePhone = phoneMatch[1];
          if (candidatePhone.length === 10 || candidatePhone.length === 11) {
            if (!/(9999|0000|1111|1234)/i.test(candidatePhone)) {
              preliminaryPhone = candidatePhone;
              break;
            }
          }
        }
      }
    }

    // Buscar perfil do cliente se temos telefone
    if (preliminaryPhone) {
      console.log(`üîç Busca preliminar de perfil para: ${preliminaryPhone}`);
      
      // Normalizar telefone (remover caracteres n√£o num√©ricos)
      const normalizedPrelimPhone = preliminaryPhone.replace(/\D/g, '');
      console.log(`   üìû Telefone normalizado: ${normalizedPrelimPhone}`);
      
      // Buscar com m√∫ltiplas varia√ß√µes do telefone
      const { data: profile } = await supabase
        .from('client_profiles')
        .select('*')
        .eq('barbershop_id', barbershopId)
        .or(`phone.eq.${preliminaryPhone},phone.eq.+55${normalizedPrelimPhone},phone.eq.${normalizedPrelimPhone}`)
        .maybeSingle();
      
      if (profile) {
        clientProfile = profile;
        clientProfileId = profile.id; // ‚úÖ Guardar ID para usar depois
        console.log(`üë§ Cliente identificado preliminarmente: ${profile.name} (ID: ${profile.id})`);
        console.log(`   üìÖ Cliente desde: ${new Date(profile.created_at).toLocaleDateString('pt-BR')}`);
        console.log(`   üì± Telefone no cadastro: ${profile.phone}`);
        
        // Atualizar sess√£o com client_profile_id
        if (sessionId) {
          await supabase
            .from('chat_sessions')
            .update({ 
              client_phone: preliminaryPhone,
              client_profile_id: profile.id 
            })
            .eq('id', sessionId);
        }
      } else {
        console.log('‚ùå Nenhum cadastro encontrado para este telefone');
      }
    }

    // ============= CONTEXTO PARA IA =============
    let barbershopContext = `
Voc√™ √© o assistente virtual da ${barbershop?.name || 'barbearia'}. Seja simp√°tico e profissional.

DATA E HORA ATUAL (Hor√°rio de Bras√≠lia):
${brasiliaDateFormatted}
Data: ${currentDate}
Hora: ${currentTime}

SERVI√áOS:
${services.map(s => `- ${s.name}: R$ ${s.price} (${s.duration_minutes}min)`).join('\n')}

PROFISSIONAIS:
${employees.map(e => `- ${e.name}`).join('\n')}

HOR√ÅRIOS:
${Object.entries(barbershop?.business_hours || {}).map(([day, hours]: [string, any]) => {
  const days: Record<string, string> = { monday: 'Seg', tuesday: 'Ter', wednesday: 'Qua', thursday: 'Qui', friday: 'Sex', saturday: 'S√°b', sunday: 'Dom' };
  return `${days[day]}: ${hours.closed ? 'Fechado' : `${hours.open}-${hours.close}`}`;
}).join(', ')}

‚è∞ INSTRU√á√ïES CR√çTICAS SOBRE HOR√ÅRIOS:

1. **Interpreta√ß√£o de Hor√°rios:**
   - "as 4" ou "√†s 4" = 04:00 (madrugada) OU 16:00 (tarde) - SEMPRE pergunte qual
   - "4 da tarde" = 16:00
   - "4 da manh√£" = 04:00
   - "9 da noite" = 21:00
   - "meio dia" = 12:00
   - "meia noite" = 00:00
   - "16h" = 16:00

2. **Quando houver ambiguidade:**
   - Se cliente diz "as 4" sem especificar per√≠odo, pergunte: "4 da manh√£ ou 4 da tarde?"
   - Se cliente diz "as 9" sem especificar, pergunte: "9 da manh√£ ou 9 da noite?"
   - Hor√°rios de 1 a 7 s√£o amb√≠guos (podem ser manh√£ ou tarde/noite)
   - Hor√°rios de 8 a 12 geralmente s√£o manh√£
   - Hor√°rios de 13 a 23 s√£o sempre tarde/noite

3. **Toler√¢ncia com erros de digita√ß√£o:**
   - "as" (sem acento) = "√†s" (com acento)
   - "4h" = "4:00" ou "16:00"
   - "quatro da tarde" = "16:00"
   - Seja flex√≠vel e compreensivo com varia√ß√µes

4. **NUNCA diga que n√£o h√° disponibilidade sem verificar:**
   - Se voc√™ recebeu informa√ß√µes de disponibilidade no contexto, use-as
   - Se N√ÉO recebeu informa√ß√µes, diga: "Deixa eu verificar a agenda do [barbeiro]..."
   - N√ÉO invente que n√£o h√° disponibilidade

5. **Confirma√ß√£o de hor√°rio:**
   - Sempre confirme o hor√°rio no formato 24h: "Confirma 16:00 (4 da tarde)?"
   - Isso evita confus√µes

REGRAS CR√çTICAS:
1. NUNCA diga "aguarde", "vou verificar", "deixe-me checar" - o sistema J√Å verificou tudo antes de voc√™ responder
2. NUNCA afirme disponibilidade sem confirma√ß√£o do sistema
3. Para criar agendamento precisa: nome (aceite qualquer forma), telefone com DDD, servi√ßo
4. Se o cliente j√° se apresentou, n√£o pe√ßa o nome novamente
5. Datas: "amanh√£" = ${new Date(brasiliaTime.getTime() + 86400000).toISOString().split('T')[0]}, "hoje" = ${currentDate}
6. Seja direto e objetivo - nada de "vou processar", "um momento", etc

${clientProfile ? `
üë§ CLIENTE IDENTIFICADO (RETORNO):
Nome: ${clientProfile.name}
Telefone: ${clientProfile.phone}
${clientProfile.notes ? `Observa√ß√µes: ${clientProfile.notes}` : ''}

üéØ INSTRU√á√ïES IMPORTANTES:
- Este √© um cliente que J√Å AGENDOU antes conosco
- Cumprimente-o pelo nome de forma calorosa: "Ol√°, ${clientProfile.name}! Que bom ter voc√™ de volta!"
- N√ÉO pe√ßa o telefone novamente, voc√™ j√° tem: ${clientProfile.phone}
- Se ele quiser agendar, confirme: "√â ${clientProfile.name}, correto?"
- Seja mais pessoal e amig√°vel, ele j√° √© conhecido da casa
` : ''}

üéØ INSTRU√á√ïES IMPORTANTES SOBRE NOMES:

1. **QUANDO EXTRAIR NOME DO CLIENTE:**
   - Cliente diz explicitamente: "meu nome √© X", "me chamo X", "sou X"
   - Cliente fornece "nome e telefone" juntos
   - Cliente CORRIGE o nome ap√≥s voc√™ ter usado nome errado
   
2. **QUANDO N√ÉO EXTRAIR/MUDAR NOME:**
   - Cliente menciona nome de OUTRA PESSOA (funcion√°rio, acompanhante, etc)
   - Cliente pergunta sobre disponibilidade: "tem hor√°rio com jos√©?"
   - Cliente diz respostas comuns: "pode sim", "t√° bom", "ok valeu"
   
3. **COMO IDENTIFICAR CORRE√á√ÉO DE NOME:**
   Se voc√™ disse: "Ol√°, [Nome]!" ou "√â [Nome], correto?"
   E cliente responde: "N√£o, √© [OutroNome]" ou "Na verdade √© [OutroNome]"
   ‚Üí ISSO √â CORRE√á√ÉO! Use o novo nome.
   
4. **COMO IDENTIFICAR MEN√á√ÉO A OUTRA PESSOA:**
   Se cliente j√° tem nome identificado e diz:
   - "tem hor√°rio com [Nome]?" ‚Üí [Nome] √© FUNCION√ÅRIO, n√£o mude o nome do cliente
   - "quero agendar para [Nome]" ‚Üí [Nome] √© OUTRA PESSOA, n√£o mude o nome do cliente
   - "pode ser com [Nome]?" ‚Üí [Nome] √© FUNCION√ÅRIO preferido, n√£o mude o nome do cliente
   
5. **EXEMPLOS PR√ÅTICOS:**

   ‚úÖ CORRETO - Extrair/Mudar nome:
   Cliente: "meu nome √© jos√©"
   Cliente: "me chamo maria"
   Voc√™: "Ol√°, jo√£o!"
   Cliente: "n√£o, √© pedro" ‚Üê CORRE√á√ÉO!
   
   ‚ùå ERRADO - N√ÉO mudar nome:
   Cliente: "meu nome √© alvaro" (nome j√° identificado)
   Cliente: "tem hor√°rio com jos√©?" ‚Üê jos√© √© FUNCION√ÅRIO
   Cliente: "pode sim" ‚Üê resposta comum
   Cliente: "t√° bom" ‚Üê resposta comum

6. **REGRA DE OURO:**
   Se o cliente J√Å TEM NOME identificado, s√≥ mude se:
   - Cliente usar padr√£o expl√≠cito: "meu nome √© X", "na verdade √© X", "correto √© X"
   - Cliente corrigir ap√≥s voc√™ ter usado nome errado: "N√£o, √© X"
   
   NUNCA mude o nome baseado em:
   - Men√ß√µes a outras pessoas (funcion√°rios, acompanhantes)
   - Respostas comuns (sim, n√£o, ok, valeu)
   - Perguntas sobre disponibilidade

7. **VALIDA√á√ÉO ANTES DE MUDAR NOME:**
   Antes de aceitar um novo nome, pergunte a si mesmo:
   - "O cliente est√° CORRIGINDO o nome dele?"
   - "Ou est√° MENCIONANDO outra pessoa?"
   - "Ou est√° dando uma RESPOSTA COMUM?"
   
   Se for corre√ß√£o ‚Üí Aceite o novo nome
   Se for men√ß√£o/resposta ‚Üí Ignore, mantenha nome atual

8. **QUANDO EM D√öVIDA:**
   Se n√£o tiver certeza se √© corre√ß√£o de nome ou men√ß√£o a outra pessoa:
   ‚Üí PERGUNTE ao cliente: "Desculpe, voc√™ est√° corrigindo seu nome ou perguntando sobre o profissional [Nome]?"

üö® REGRAS CR√çTICAS DE CONFIRMA√á√ÉO:

1. **NUNCA diga que confirmou/agendou/criou se voc√™ n√£o tem CERTEZA ABSOLUTA**
2. **NUNCA use palavras como:**
   - "confirmado"
   - "agendamento criado"
   - "est√° agendado"
   - "marquei"
   - "reservado"
   - "seu hor√°rio est√° garantido"
   
   **A MENOS QUE** voc√™ tenha recebido confirma√ß√£o expl√≠cita do sistema

3. **Se falta QUALQUER dado (nome, telefone, servi√ßo, profissional, hor√°rio, data):**
   - Diga: "Para finalizar o agendamento, preciso de..."
   - N√ÉO diga: "Agendamento confirmado"

4. **Seja HONESTO:**
   - Se n√£o tem certeza ‚Üí Pergunte
   - Se falta dado ‚Üí Pe√ßa
   - Se n√£o conseguiu agendar ‚Üí Explique por qu√™

5. **Formato de confirma√ß√£o v√°lido (SOMENTE quando tiver TODOS os dados):**
   "‚úÖ Agendamento confirmado!
   
   üìã Detalhes:
   üë§ Nome: [nome]
   üì± Telefone: [telefone]
   üíà Servi√ßo: [servi√ßo]
   üë®‚Äçüíº Profissional: [profissional]
   üìÖ Data: [data]
   ‚è∞ Hor√°rio: [hor√°rio]
   
   Voc√™ receber√° uma confirma√ß√£o por WhatsApp em breve!"

6. **NUNCA invente que criou algo se n√£o criou de fato!**
`;

    // Alertar IA se hor√°rio est√° fora do expediente t√≠pico (6h-23h)
    if (extractedTime) {
      const [hour] = extractedTime.split(':').map(Number);
      if (hour < 6 || hour >= 23) {
        console.log('‚ö†Ô∏è Hor√°rio fora do expediente t√≠pico:', extractedTime);
        barbershopContext += `\n\n‚ö†Ô∏è ATEN√á√ÉO: Cliente solicitou hor√°rio ${extractedTime} (${hour < 6 ? 'madrugada' : 'noite'}). Confirme se realmente √© esse hor√°rio ou se ele quis dizer outro per√≠odo.`;
      }
    }

    // Informar IA sobre cadastro existente
    if (clientProfile) {
      console.log('üì¢ Adicionando info de cadastro existente ao contexto da IA');
      barbershopContext += `\n\nüîî CADASTRO ENCONTRADO:
- Nome completo: ${clientProfile.name}
- Telefone: ${clientProfile.phone}
- Cliente desde: ${new Date(clientProfile.created_at).toLocaleDateString('pt-BR')}

IMPORTANTE: Cumprimente o cliente pelo NOME COMPLETO e mencione que encontrou o cadastro dele!
Exemplo: "‚úÖ Ol√° ${clientProfile.name}! Encontrei seu cadastro aqui. Vamos agendar?"`;
    }

    const messages = [
      { role: "system", content: barbershopContext },
      ...conversationHistory,
      { role: "user", content: message }
    ];

    // ============= CHAMAR IA =============
    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages,
        temperature: 0.7,
        max_tokens: 1000,
      }),
    });

    if (!response.ok) {
      throw new Error(`AI API error: ${response.status}`);
    }

    const data = await response.json();
    let aiMessage = data.choices[0]?.message?.content || '';
    
    console.log('ü§ñ IA disse:', aiMessage);

    // ============= USAR RESULTADO DO GUARD =============
    let finalMessage = aiMessage;
    let actionResult = null;

    if (serverSideAvailabilityResult) {
      console.log('üîí Usando resultado do guard:', serverSideAvailabilityResult.message);
      finalMessage = serverSideAvailabilityResult.message;
    }

    // ============= DETECTAR CONTEXTO COMPLETO E AUTO-CRIAR =============
    let extractedClientName: string | null = null;
    let extractedClientPhone: string | null = null;
    let extractedServiceId: string | null = null;

    // Extrair dados do hist√≥rico se a IA mencionou ter agendamento
    const shouldAutoCreate = /agend(?:amento|ar|ado)|confirm(?:ar|ado|ei)|criei|registr(?:ar|ei|ado)/i.test(aiMessage);
    
    console.log('üîç AUTO-CREATE check:', { shouldAutoCreate, hasAvailability: !!serverSideAvailabilityResult });

    if (shouldAutoCreate) {
      console.log('üîç AUTO-DETECT: Detectando dados para cria√ß√£o autom√°tica');
      
      // Recuperar hor√°rio e funcion√°rio do hist√≥rico se n√£o tiver no resultado atual
      let finalTime = serverSideAvailabilityResult?.time || extractedTime;
      let finalDate = serverSideAvailabilityResult?.date || extractedDate;
      let finalEmployee = extractedEmployee;

        // Se n√£o temos hor√°rio/funcion√°rio da mensagem atual, buscar no hist√≥rico
        if (!finalTime || !finalEmployee || !finalDate) {
          console.log('üîé Buscando hor√°rio/funcion√°rio/data no hist√≥rico');
          
          // ‚ö†Ô∏è DETECTAR SE USU√ÅRIO MENCIONOU PER√çODO VAGO
          const vagueTimeMentioned = /\b(manh[√£a]|tarde|noite)\b/i.test(message);
          
          // S√≥ buscar no hist√≥rico se ainda n√£o tiver os dados
          for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
            // Buscar hor√°rio APENAS SE n√£o foi per√≠odo vago
            if (!finalTime && !vagueTimeMentioned) {
              const timeMatch = msg.content.match(/(\d{1,2}):(\d{2})|(\d{1,2})h/i);
              if (timeMatch) {
                finalTime = timeMatch[1] ? `${timeMatch[1].padStart(2, '0')}:${timeMatch[2] || '00'}` : `${timeMatch[3].padStart(2, '0')}:00`;
                console.log('‚è∞ Hor√°rio do hist√≥rico:', finalTime);
              }
            }
            
            // Buscar funcion√°rio
            if (!finalEmployee) {
              for (const emp of employees) {
                if (msg.content.toLowerCase().includes(emp.name.toLowerCase())) {
                  finalEmployee = emp;
                  console.log('üë§ Funcion√°rio do hist√≥rico:', emp.name);
                  break;
                }
              }
            }
            
            if (finalTime && finalEmployee) break;
          }
          
          if (vagueTimeMentioned) {
            console.log('‚ö†Ô∏è Per√≠odo vago detectado, n√£o usar hor√°rio do hist√≥rico');
          }
        }
        
        // ============================================
        // USAR DATA J√Å EXTRA√çDA (n√£o re-extrair)
        // ============================================
        // A data j√° foi extra√≠da com prioridade inteligente acima
        if (!finalDate) {
          finalDate = extractedDate;
          console.log(`üìÖ Data final para agendamento: ${finalDate}`);
          console.log(`   Fonte: ${dateSource}`);
        }
      
      console.log('üìä Dados finais:', { finalTime, finalDate, finalEmployee: finalEmployee?.name });
      
      // Helper: normalizar nome para Title Case
      const toTitleCase = (s: string) =>
        s.trim()
          .replace(/\s+/g, ' ')
          .split(' ')
          .map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase())
          .join(' ');
      
      // ============================================
      // LISTA DE RESPOSTAS COMUNS (N√ÉO S√ÉO NOMES)
      // ============================================
      const commonResponses = [
        // Confirma√ß√µes
        'sim', 'pode sim', 'pode', 'ok', 'okay', 'beleza', 'perfeito',
        '√≥timo', 'otimo', 'certo', 'certeza', 'com certeza', 'claro',
        'claro que sim', 'isso mesmo', 'exato', 'correto',
        
        // Nega√ß√µes
        'n√£o', 'nao', 'nunca', 'jamais',
        
        // Agradecimentos
        'obrigado', 'obrigada', 'valeu', 'ok valeu', 'brigado',
        
        // Sauda√ß√µes
        'oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite',
        
        // Respostas curtas
        't√°', 'ta', 't√° bom', 'ta bom', 'tudo bem', 'de boa',
        'show', 'legal', 'massa', 'top', 'blz'
      ];

      console.log('üìã Lista de bloqueio carregada com', commonResponses.length, 'respostas comuns');
      
      // ============================================
      // EXTRA√á√ÉO DE NOME DO HIST√ìRICO
      // ============================================
      
      // Se j√° identificamos o cliente pelo cadastro, N√ÉO extrair nome
      if (clientProfile) {
        console.log(`üõ°Ô∏è Cliente j√° identificado pelo cadastro: ${clientProfile.name}`);
        console.log(`   Pulando extra√ß√£o de nome do hist√≥rico`);
        extractedClientName = clientProfile.name;
        
      } else {
        console.log('üîç Buscando nome no hist√≥rico (cliente n√£o identificado)...');
        
        // Extrair nome do hist√≥rico (relaxado para aceitar lowercase)
        for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
          if (msg.role === 'user') {
            console.log(`üîç Analisando mensagem para nome: "${msg.content}"`);
          
          // ============================================
          // BLOQUEAR RESPOSTAS COMUNS
          // ============================================
          const normalizedContent = msg.content.toLowerCase().trim();
          if (commonResponses.includes(normalizedContent)) {
            console.log(`‚ö†Ô∏è Resposta comum bloqueada: "${msg.content}"`);
            continue; // Pula esta mensagem
          }
          
          // m1: Padr√µes expl√≠citos - MELHORADO para capturar at√© 5 palavras
          const m1 = msg.content.match(/(?:meu\s+nome\s+(?:√©|e|eh)\s+|me\s+chamo\s+|sou\s+o\s+|sou\s+a\s+|sou\s+)([A-Z√Ä-√öa-z√†-√∫''\-]+(?:\s+[A-Z√Ä-√öa-z√†-√∫''\-]+){0,4})(?=\s*,|\s+e\s+(?:meu|o)|$|\s+(?:n√∫mero|numero|telefone|celular|whats|ddd)|\s+\d)/i);

          // m2: "Nome e telefone" - CORRIGIDO para aceitar 1-4 palavras {0,3}
          const m2 = msg.content.match(/^([A-Z√Ä-√ö][a-z√†-√∫]+(?:\s+[A-Z√Ä-√ö][a-z√†-√∫]+){0,3})\s+e\s+(?:meu\s+)?(?:n√∫mero|numero|telefone|celular)?\s*(?:√©\s+)?(\d{10,11})/i);

          // m3: Nome + v√≠rgula + telefone (1-4 palavras)
          const m3 = msg.content.match(/^([A-Z√Ä-√ö][a-z√†-√∫]+(?:\s+[A-Z√Ä-√ö][a-z√†-√∫]+){0,3})\s*,\s*(\d{10,11})/i);

          // m4: Nome + telefone direto (1-4 palavras)
          const m4 = msg.content.match(/^([A-Z√Ä-√ö][a-z√†-√∫]+(?:\s+[A-Z√Ä-√ö][a-z√†-√∫]+){0,3})\s+(\d{10,11})/i);
          
// Tentar m1 primeiro (padr√µes expl√≠citos como "meu nome √©")
if (m1 && m1[1]) {
  const candidateName = toTitleCase(m1[1].trim());
  const parts = candidateName.split(/\s+/);
  const isObviousTest = /^(test|teste|cliente|usuario|user|fulano|ciclano)/i.test(candidateName);
  const isExactGeneric = /^(jo√£o|maria)\s+(silva|santos)$/i.test(candidateName.toLowerCase());
  
  console.log(`   ‚îú‚îÄ m1 match: "${candidateName}" (${parts.length} palavras)`);
  console.log(`   ‚îú‚îÄ √â teste: ${isObviousTest}, √â gen√©rico: ${isExactGeneric}`);
  
  // ============================================
  // VALIDA√á√ÉO DE CONTEXTO
  // ============================================
  
  // Verificar se mensagem indica OUTRA PESSOA (n√£o o cliente)
  const mentionsOtherPerson = /(?:tem\s+hor√°rio|tem\s+vaga|dispon√≠vel|atende|pode\s+ser)\s+(?:com|o|a)\s+/i.test(msg.content);
  
  if (mentionsOtherPerson) {
    console.log(`‚ö†Ô∏è Contexto indica men√ß√£o a OUTRA PESSOA (funcion√°rio), n√£o √© nome do cliente: "${candidateName}"`);
    // N√£o extrair nome, pular
  } else {
    // Verificar se √© CORRE√á√ÉO de nome
    const isCorrection = /(?:n√£o|nao|na\s+verdade|correto|corrigindo|ops|desculpa|erro|errei)/i.test(msg.content);
    
    if (extractedClientName && !isCorrection) {
      console.log(`‚ÑπÔ∏è Nome j√° identificado (${extractedClientName}) e n√£o √© corre√ß√£o expl√≠cita, mantendo nome atual`);
    } else {
      if (isCorrection && extractedClientName) {
        console.log(`üîÑ CORRE√á√ÉO DE NOME detectada: "${extractedClientName}" ‚Üí "${candidateName}"`);
      }
      
      // ============================================
      // FIM VALIDA√á√ÉO DE CONTEXTO
      // ============================================
      
      if (parts.length >= 1 && !isObviousTest && !isExactGeneric) {
        extractedClientName = candidateName;
        console.log(`‚úÖ Nome extra√≠do (m1): ${extractedClientName}`);
      } else {
        console.log(`‚ùå m1 rejeitado`);
      }
    }
  }
}


// Se n√£o encontrou com m1/m0, tentar m2 (nome + "e meu n√∫mero √©" + telefone) - CORRIGIDO para 1+ palavras
if (!extractedClientName && m2 && m2[1]) {
  const raw = m2[1].trim();
  const candidateName = toTitleCase(raw);
  const parts = candidateName.split(/\s+/);
  const isObviousTest = /^(test|teste|cliente|usuario|user|fulano|ciclano)/i.test(candidateName);
  const isExactGeneric = /^(jo√£o|maria)\s+(silva|santos)$/i.test(candidateName.toLowerCase());
  
  console.log(`   ‚îú‚îÄ m2 match: "${candidateName}" (${parts.length} palavras)`);
  console.log(`   ‚îú‚îÄ √â teste: ${isObviousTest}, √â gen√©rico: ${isExactGeneric}`);
  
  if (parts.length >= 1 && parts.length <= 4 && !isObviousTest && !isExactGeneric) {
    extractedClientName = candidateName;
    console.log(`‚úÖ Nome extra√≠do (m2): ${extractedClientName}`);
    if (m2[2] && !extractedClientPhone) {
      extractedClientPhone = m2[2];
      console.log(`üì± Telefone extra√≠do junto com nome: ${extractedClientPhone}`);
    }
  } else {
    console.log(`‚ùå m2 rejeitado`);
  }
}

// Se n√£o encontrou, tentar m3 (nome, telefone) - CORRIGIDO para 1+ palavras
if (!extractedClientName && m3 && m3[1]) {
  const candidateName = toTitleCase(m3[1].trim());
  const parts = candidateName.split(/\s+/);
  const isObviousTest = /^(test|teste|cliente|usuario|user|fulano|ciclano)/i.test(candidateName);
  const isExactGeneric = /^(jo√£o|maria)\s+(silva|santos)$/i.test(candidateName.toLowerCase());
  
  console.log(`   ‚îú‚îÄ m3 match: "${candidateName}" (${parts.length} palavras)`);
  
  if (parts.length >= 1 && parts.length <= 4 && !isObviousTest && !isExactGeneric) {
    extractedClientName = candidateName;
    console.log(`‚úÖ Nome extra√≠do (m3): ${extractedClientName}`);
    if (m3[2] && !extractedClientPhone) {
      extractedClientPhone = m3[2];
      console.log(`üì± Telefone extra√≠do (m3): ${extractedClientPhone}`);
    }
  } else {
    console.log(`‚ùå m3 rejeitado`);
  }
}

// Se n√£o encontrou, tentar m4 (nome telefone) - CORRIGIDO para 1+ palavras
if (!extractedClientName && m4 && m4[1]) {
  const candidateName = toTitleCase(m4[1].trim());
  const parts = candidateName.split(/\s+/);
  const isObviousTest = /^(test|teste|cliente|usuario|user|fulano|ciclano)/i.test(candidateName);
  const isExactGeneric = /^(jo√£o|maria)\s+(silva|santos)$/i.test(candidateName.toLowerCase());
  
  console.log(`   ‚îú‚îÄ m4 match: "${candidateName}" (${parts.length} palavras)`);
  
  if (parts.length >= 1 && parts.length <= 4 && !isObviousTest && !isExactGeneric) {
    extractedClientName = candidateName;
    console.log(`‚úÖ Nome extra√≠do (m4): ${extractedClientName}`);
    if (m4[2] && !extractedClientPhone) {
      extractedClientPhone = m4[2];
      console.log(`üì± Telefone extra√≠do (m4): ${extractedClientPhone}`);
    }
  } else {
    console.log(`‚ùå m4 rejeitado`);
  }
}

if (!m1 && !m2 && !m3 && !m4) {
  console.log(`‚ùå Nenhum padr√£o de nome matchou`);
}

// Caso tenha extra√≠do nome, interrompe o loop para n√£o sobrescrever
if (extractedClientName) {
  break;
}
          }
        }
      } // Fechar o else do if (clientProfile)

      // Extrair telefone do hist√≥rico
      for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
        if (msg.role === 'user') {
          const phoneMatch = msg.content.match(/(?:telefone|n√∫mero|celular|whats)?\s*(\d{10,11})/i);
          if (phoneMatch) {
            const candidatePhone = phoneMatch[1];
            
            // Validar comprimento (10 ou 11 d√≠gitos)
            if (candidatePhone.length !== 10 && candidatePhone.length !== 11) {
              console.log(`‚ö†Ô∏è Telefone com comprimento inv√°lido: ${candidatePhone.length} d√≠gitos`);
              continue; // Pular para pr√≥xima tentativa
            }
            
            // Validar telefone
            if (!/(9999|0000|1111|1234)/i.test(candidatePhone)) {
              extractedClientPhone = candidatePhone;
              console.log('üì± Telefone extra√≠do:', extractedClientPhone);
              break;
            }
          }
        }
      }

      // ============= BUSCAR/ATUALIZAR CADASTRO =============
      if (extractedClientPhone) {
        // Se j√° identificamos o cliente preliminarmente e o telefone bate
        if (clientProfile && clientProfile.phone === extractedClientPhone) {
          console.log('‚úÖ Usando cadastro j√° identificado:', clientProfile.name);
          // SEMPRE usar nome do cadastro (sobrescrever extra√ß√µes)
          extractedClientName = clientProfile.name;
          console.log('‚úÖ Nome do cadastro:', extractedClientName);
        } else {
          // Buscar cadastro para o novo telefone detectado COM M√öLTIPLAS VARIA√á√ïES
          const normalizedPhone = extractedClientPhone.replace(/\D/g, '');
          const last11Digits = normalizedPhone.slice(-11);
          const last10Digits = normalizedPhone.slice(-10);
          
          console.log('üîç Buscando cadastro para novo telefone:', extractedClientPhone);
          console.log('   üìû Varia√ß√µes de busca:');
          console.log(`      - Exato: ${extractedClientPhone}`);
          console.log(`      - Normalizado: ${normalizedPhone}`);
          console.log(`      - Com +55: +55${normalizedPhone}`);
          console.log(`      - √öltimos 11 d√≠gitos: ${last11Digits}`);
          console.log(`      - √öltimos 10 d√≠gitos: ${last10Digits}`);
          
          // Buscar TODOS os perfis da barbearia para compara√ß√£o manual
          const { data: allProfiles } = await supabase
            .from('client_profiles')
            .select('id, name, phone, notes, created_at, phone_verified')
            .eq('barbershop_id', barbershopId);
          
          let profile = null;
          
          if (allProfiles && allProfiles.length > 0) {
            // Comparar manualmente cada perfil
            for (const p of allProfiles) {
              const profileNormalized = p.phone.replace(/\D/g, '');
              const profileLast11 = profileNormalized.slice(-11);
              const profileLast10 = profileNormalized.slice(-10);
              
              // Match exato tem prioridade
              if (p.phone === extractedClientPhone || 
                  p.phone === normalizedPhone || 
                  p.phone === `+55${normalizedPhone}`) {
                profile = p;
                console.log('‚úÖ Match EXATO encontrado:', p.name);
                break;
              }
              
              // Match por √∫ltimos d√≠gitos (mais flex√≠vel)
              if (profileLast11 === last11Digits || 
                  profileLast10 === last10Digits ||
                  profileNormalized === normalizedPhone) {
                profile = p;
                console.log('‚úÖ Match por √öLTIMOS D√çGITOS encontrado:', p.name);
                // N√£o break aqui, continuar buscando match exato
              }
            }
          }
          
          if (profile) {
            console.log(`‚úÖ Cadastro identificado: ${profile.name}`);
            console.log(`   Telefone DB: ${profile.phone}`);
            console.log(`   Telefone digitado: ${extractedClientPhone}`);
            console.log(`   Verificado: ${profile.phone_verified}`);
            console.log(`   Criado em: ${new Date(profile.created_at).toLocaleDateString('pt-BR')}`);
            
            clientProfile = profile;
            clientProfileId = profile.id;
            
            // SEMPRE usar nome do cadastro (sobrescrever extra√ß√µes)
            extractedClientName = profile.name;
            console.log(`üìù Nome atualizado para nome do cadastro: ${extractedClientName}`);
            
          } else {
            console.log('‚ÑπÔ∏è Nenhum cadastro encontrado para:', extractedClientPhone);
            console.log('   ‚û°Ô∏è Agendamento ser√° criado como visitante (sem client_profile_id)');
          }
        }
      }
      
      // ============= BUSCA INTELIGENTE POR NOME (se n√£o achou por telefone) =============
      if (!clientProfile && extractedClientName && extractedClientName.length > 3) {
        console.log('üîç Tentando buscar cliente por nome:', extractedClientName);
        
        const { data: profileByName } = await supabase
          .from('client_profiles')
          .select('id, name, phone, notes, created_at, phone_verified')
          .eq('barbershop_id', barbershopId)
          .ilike('name', `%${extractedClientName}%`)
          .limit(1)
          .maybeSingle();
        
        if (profileByName) {
          console.log('‚úÖ Cliente encontrado por nome:', profileByName.name);
          console.log(`   Telefone: ${profileByName.phone}`);
          
          // Perguntar se quer usar esse telefone
          clientProfile = profileByName;
          clientProfileId = profileByName.id;
          extractedClientName = profileByName.name;
          extractedClientPhone = profileByName.phone;
          
          console.log('üìù Dados atualizados do perfil encontrado');
        }
      }

      // Fallback: extrair da mensagem da IA se ainda falta algum dado
      if (!extractedClientName) {
        console.log('üîç Tentando extrair nome da mensagem da IA:', aiMessage.substring(0, 200));
        
        // Padr√µes diversos para capturar nome da mensagem da IA (incluindo nomes de 1 palavra)
        const aiNamePatterns = [
          /Cliente:\s*([^\n*]+)/i,                                    // "Cliente: Nome"
          /(?:Agrade√ßo|Obrigad[oa])[^,]*,\s*([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*)\s*!/i,  // "Agrade√ßo..., Nome!"
          /(?:Ol√°|Oi),?\s*([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*)\s*!/i,  // "Ol√°, Nome!" (aceita 1+ palavras)
          /([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*),?\s+seu\s+agendamento/i  // "Nome, seu agendamento"
        ];
        
        for (const pattern of aiNamePatterns) {
          const match = aiMessage.match(pattern);
          if (match?.[1]) {
            const candidateName = toTitleCase(match[1].trim());
            const parts = candidateName.split(' ');
            // Valida√ß√£o inteligente
            const isObviousTest = /^(test|teste|cliente|usuario|user|fulano|ciclano)/i.test(candidateName);
            const isExactGeneric = /^(jo√£o|maria)\s+(silva|santos)$/i.test(candidateName.toLowerCase());
            if (parts.length >= 1 && !isObviousTest && !isExactGeneric) {
              extractedClientName = candidateName;
              console.log('üë§ Nome extra√≠do da IA:', extractedClientName);
              break;
            }
          }
        }
      }

      if (!extractedClientPhone) {
        const aiPhone = aiMessage.match(/Telefone:\s*(\d{10,11})/i)?.[1];
        if (aiPhone) {
          extractedClientPhone = aiPhone;
          console.log('üì± Telefone extra√≠do da IA:', extractedClientPhone);
        }
      }

      if (!extractedServiceId) {
        const aiService = aiMessage.match(/Servi[c√ß]o:\s*([^\n*]+)/i)?.[1]?.trim().toLowerCase();
        if (aiService) {
          const svc = services.find(s => s.name.toLowerCase() === aiService);
          if (svc) {
            extractedServiceId = svc.id;
            console.log('üíà Servi√ßo extra√≠do da IA:', svc.name);
          }
        }
      }

      // Extrair servi√ßo (do hist√≥rico ou se s√≥ tem 1)
      if (services.length === 1) {
        extractedServiceId = services[0].id;
        console.log('üíà Servi√ßo √∫nico detectado:', services[0].name);
      } else {
        for (const msg of [...conversationHistory, { role: 'user', content: message }].reverse()) {
          if (msg.role === 'user') {
            for (const svc of services) {
              if (msg.content.toLowerCase().includes(svc.name.toLowerCase())) {
                extractedServiceId = svc.id;
                console.log('üíà Servi√ßo extra√≠do:', svc.name);
                break;
              }
            }
          }
          if (extractedServiceId) break;
        }
      }

      // AUTO-SELECIONAR FUNCION√ÅRIO SE N√ÉO FOI ESPECIFICADO
      if (!finalEmployee && finalTime && finalDate) {
        console.log('üîç Nenhum funcion√°rio especificado, buscando dispon√≠vel...');
        
        // Se s√≥ tem 1 funcion√°rio, usar automaticamente
        if (employees.length === 1) {
          finalEmployee = employees[0];
          console.log('üë§ Funcion√°rio √∫nico auto-selecionado:', finalEmployee.name);
        } else {
          // Buscar primeiro funcion√°rio dispon√≠vel no hor√°rio
          const requestedDayOfWeek = new Date(finalDate + 'T00:00:00').getDay();
          const requestedMinutes = parseInt(finalTime.split(':')[0]) * 60 + parseInt(finalTime.split(':')[1]);
          const defaultDuration = extractedServiceId 
            ? services.find(s => s.id === extractedServiceId)?.duration_minutes || 60
            : 60;
          
          for (const emp of employees) {
            // Verificar expediente
            const { data: schedules } = await supabase
              .from('employee_schedules')
              .select('*')
              .eq('employee_id', emp.id)
              .eq('day_of_week', requestedDayOfWeek)
              .eq('is_active', true);
            
            if (!schedules || schedules.length === 0) continue;
            
            const schedule = schedules[0];
            const startMinutes = parseInt(schedule.start_time.split(':')[0]) * 60 + parseInt(schedule.start_time.split(':')[1]);
            const endMinutes = parseInt(schedule.end_time.split(':')[0]) * 60 + parseInt(schedule.end_time.split(':')[1]);
            
            if (requestedMinutes < startMinutes || requestedMinutes + defaultDuration > endMinutes) continue;
            
            // Verificar conflitos
            const { data: conflicts } = await supabase
              .from('appointments')
              .select('*')
              .eq('employee_id', emp.id)
              .eq('appointment_date', finalDate)
              .neq('status', 'cancelled');
            
            let hasConflict = false;
            if (conflicts) {
              for (const appt of conflicts) {
                const apptStart = parseInt(appt.start_time.split(':')[0]) * 60 + parseInt(appt.start_time.split(':')[1]);
                const apptEnd = parseInt(appt.end_time.split(':')[0]) * 60 + parseInt(appt.end_time.split(':')[1]);
                
                if (
                  (requestedMinutes >= apptStart && requestedMinutes < apptEnd) ||
                  (requestedMinutes + defaultDuration > apptStart && requestedMinutes + defaultDuration <= apptEnd) ||
                  (requestedMinutes <= apptStart && requestedMinutes + defaultDuration >= apptEnd)
                ) {
                  hasConflict = true;
                  break;
                }
              }
            }
            
            if (!hasConflict) {
              finalEmployee = emp;
              console.log('üë§ Funcion√°rio dispon√≠vel auto-selecionado:', emp.name);
              break;
            }
          }
        }
      }

      // ============================================
      // VERIFICAR SE DEVE PEDIR CONFIRMA√á√ÉO OU CRIAR
      // ============================================
      
      // Verificar se tem todos os dados necess√°rios
      const hasAllDataForConfirmation = 
        extractedClientName &&
        extractedClientPhone &&
        extractedServiceId &&
        finalEmployee &&
        finalTime &&
        finalDate;
      
      console.log('üîç Verificando dados para confirma√ß√£o:');
      console.log(`   Nome: ${extractedClientName ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Telefone: ${extractedClientPhone ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Servi√ßo: ${extractedServiceId ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Funcion√°rio: ${finalEmployee ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Data: ${finalDate ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Hor√°rio: ${finalTime ? '‚úÖ' : '‚ùå'}`);
      
      if (hasAllDataForConfirmation) {
        // Verificar se usu√°rio j√° confirmou
        const lastUserMessage = message.toLowerCase();
        const confirmKeywords = ['sim', 'confirmo', 'confirma', 'est√° certo', 'correto', 
                                 'pode criar', 't√° bom', 'ok', 'isso mesmo', 'exato', 'perfeito'];
        const userConfirmed = confirmKeywords.some(kw => lastUserMessage.includes(kw));
        
        console.log(`   J√° confirmado: ${userConfirmed ? 'SIM' : 'N√ÉO'}`);
        
        if (userConfirmed) {
          console.log('‚úÖ Usu√°rio confirmou! Criando agendamento...');
        } else {
          console.log('üìã Todos os dados coletados, PEDINDO confirma√ß√£o ao usu√°rio');
        }
        
        const selectedService = services.find(s => s.id === extractedServiceId);
        
        // Se ainda n√£o confirmou, pedir confirma√ß√£o
        if (!userConfirmed) {
          console.log('‚ö†Ô∏è Usu√°rio ainda n√£o confirmou, pedindo confirma√ß√£o');
          
          // ============================================
          // DETECTAR SE HOUVE MUDAN√áA NOS DADOS
          // ============================================
          
          let changeDetected = false;
          let changesArray: string[] = [];
          
          // Buscar √∫ltima mensagem de confirma√ß√£o do bot
          const lastConfirmationMessage = conversationHistory
            .slice()
            .reverse()
            .find((m: any) => m.role === 'assistant' && m.content.includes('üìã'));
          
          if (lastConfirmationMessage) {
            console.log('üîç Verificando mudan√ßas desde √∫ltima confirma√ß√£o...');
            
            // ============================================
            // VERIFICAR SE AGENDAMENTO J√Å FOI CONFIRMADO/CRIADO
            // ============================================
            
            // Encontrar √≠ndice da √∫ltima confirma√ß√£o
            const confirmationIndex = conversationHistory.findIndex(
              (m: any) => m === lastConfirmationMessage
            );
            
            // Procurar mensagem de sucesso AP√ìS a confirma√ß√£o
            const messagesAfterConfirmation = conversationHistory.slice(confirmationIndex + 1);
            
            const hasSuccessMessage = messagesAfterConfirmation.some((m: any) => 
              m.role === 'assistant' && (
                m.content.includes('‚úÖ Agendamento confirmado') ||
                m.content.includes('marcado com sucesso') ||
                m.content.includes('voc√™ est√° agendado') ||
                m.content.includes('At√© l√°!')
              )
            );
            
            if (hasSuccessMessage) {
              console.log('‚ÑπÔ∏è Agendamento anterior j√° foi criado/confirmado');
              console.log('üÜï Este √© um NOVO agendamento, n√£o uma altera√ß√£o');
              console.log('üì§ Usando mensagem padr√£o (n√£o avisar mudan√ßas)');
              
              // N√ÉO detectar mudan√ßas, pular toda a compara√ß√£o
              changeDetected = false;
              changesArray = [];
              
            } else {
              console.log('üîÑ Agendamento anterior ainda n√£o foi confirmado');
              console.log('üîç Verificando se houve altera√ß√µes...');
              
              // ============================================
              // CONTINUAR COM DETEC√á√ÉO DE MUDAN√áAS
              // ============================================
              
              // Extrair dados da mensagem anterior
              const prevDataMatch = lastConfirmationMessage.content.match(/üìÖ Data: ([^\n]+)/);
              const prevTimeMatch = lastConfirmationMessage.content.match(/‚è∞ Hor√°rio: ([^\n]+)/);
              const prevServiceMatch = lastConfirmationMessage.content.match(/üíà Servi√ßo: ([^\n]+)/);
              const prevEmployeeMatch = lastConfirmationMessage.content.match(/üë®‚Äçüíº Profissional: ([^\n]+)/);
              
              const prevData = prevDataMatch?.[1]?.trim();
              const prevTime = prevTimeMatch?.[1]?.trim();
              const prevService = prevServiceMatch?.[1]?.trim();
              const prevEmployee = prevEmployeeMatch?.[1]?.trim();
              
              // Dados atuais
              const serviceName = selectedService?.name || 'Servi√ßo';
              const employeeName = finalEmployee.name;
              const formattedDate = new Date(finalDate + 'T00:00:00').toLocaleDateString('pt-BR', { 
                weekday: 'long', 
                day: '2-digit', 
                month: 'long', 
                year: 'numeric' 
              });
              
              // Comparar e detectar mudan√ßas
              if (prevData && prevData !== formattedDate) {
                changesArray.push(`üìÖ **Data**: ${formattedDate}`);
                console.log(`üìÖ Data mudou: "${prevData}" ‚Üí "${formattedDate}"`);
              }
              
              if (prevTime && prevTime !== finalTime) {
                changesArray.push(`‚è∞ **Hor√°rio**: ${finalTime}`);
                console.log(`‚è∞ Hor√°rio mudou: "${prevTime}" ‚Üí "${finalTime}"`);
              }
              
              if (prevService && prevService !== serviceName) {
                changesArray.push(`üíà **Servi√ßo**: ${serviceName}`);
                console.log(`üíà Servi√ßo mudou: "${prevService}" ‚Üí "${serviceName}"`);
              }
              
              if (prevEmployee && prevEmployee !== employeeName) {
                changesArray.push(`üë®‚Äçüíº **Profissional**: ${employeeName}`);
                console.log(`üë®‚Äçüíº Profissional mudou: "${prevEmployee}" ‚Üí "${employeeName}"`);
              }
              
              if (changesArray.length > 0) {
                changeDetected = true;
                console.log(`‚úÖ ${changesArray.length} mudan√ßa(s) detectada(s)`);
              } else {
                console.log('‚ÑπÔ∏è Nenhuma mudan√ßa detectada');
              }
            }
          } else {
            console.log('‚ÑπÔ∏è Primeira confirma√ß√£o (sem hist√≥rico anterior)');
          }
          
          // ============================================
          // CONSTRUIR MENSAGEM DE CONFIRMA√á√ÉO
          // ============================================
          
          const serviceName = selectedService?.name || 'Servi√ßo';
          const employeeName = finalEmployee.name;
          
          // Formatar data por extenso
          const dateObj = new Date(finalDate + 'T00:00:00');
          const dayName = dateObj.toLocaleDateString('pt-BR', { weekday: 'long' });
          const dayNumber = dateObj.toLocaleDateString('pt-BR', { day: '2-digit' });
          const monthName = dateObj.toLocaleDateString('pt-BR', { month: 'long' });
          const year = dateObj.getFullYear();
          const formattedDate = `${dayName}, ${dayNumber} de ${monthName} de ${year}`;
          
          let confirmationMessage = '';
          
          if (changeDetected) {
            // ============================================
            // ANALISAR TIPO DE MENSAGEM DO USU√ÅRIO
            // ============================================
            
            const userMessage = message.toLowerCase();
            
            // Detectar perguntas sobre disponibilidade
            const isAvailabilityQuestion = 
              userMessage.includes('tem vaga') ||
              userMessage.includes('tem hor√°rio') ||
              userMessage.includes('tem horario') ||
              userMessage.includes('tem as') ||       // "tem as 13?"
              userMessage.includes('tem √†s') ||       // "tem √†s 14?"
              userMessage.includes('tem os') ||       // "tem os 15?"
              userMessage.includes('tem aos') ||      // "tem aos 16?"
              userMessage.includes('t√° livre') ||
              userMessage.includes('ta livre') ||
              userMessage.includes('est√° livre') ||
              userMessage.includes('esta livre') ||
              userMessage.includes('dispon√≠vel') ||
              userMessage.includes('disponivel') ||
              userMessage.includes('tem como') ||
              userMessage.includes('d√° pra') ||
              userMessage.includes('da pra') ||
              userMessage.includes('rola') ||         // "rola as 13?"
              userMessage.includes('consegue') ||     // "consegue as 13?"
              (userMessage.includes('?') && (
                userMessage.includes('hora') ||
                userMessage.includes('dia') ||
                userMessage.includes('data') ||
                /\d{1,2}/.test(userMessage)           // detecta "13?", "14?" etc
              ));
            
            console.log(`üîç Tipo de mensagem detectado: ${isAvailabilityQuestion ? 'PERGUNTA' : 'INSTRU√á√ÉO'}`);
            
            // ============================================
            // MENSAGEM ADAPTADA AO CONTEXTO
            // ============================================
            
            const changesList = changesArray.join('\n');
            let changeIntro = '';
            
            if (isAvailabilityQuestion) {
              // ============================================
              // RESPOSTA PARA PERGUNTA (contextual)
              // ============================================

              console.log('üí¨ Respondendo PERGUNTA sobre disponibilidade');

              // Identificar o que mudou para responder especificamente
              const changedTime = changesArray.find(c => c.includes('Hor√°rio'));
              const changedDate = changesArray.find(c => c.includes('Data'));
              const changedService = changesArray.find(c => c.includes('Servi√ßo'));
              const changedEmployee = changesArray.find(c => c.includes('Profissional'));

              if (changedTime) {
                // Extrair hor√°rio da string "‚è∞ **Hor√°rio**: 13:00"
                const timeMatch = changedTime.match(/Hor√°rio\*\*:\s*(.+)/);
                const time = timeMatch ? timeMatch[1].trim() : 'esse hor√°rio';
                changeIntro = `‚úÖ Sim, ${time} est√° livre! Quer confirmar nesse hor√°rio?`;
                console.log(`  ‚Üí Respondendo sobre hor√°rio: ${time}`);

              } else if (changedDate) {
                // Extrair data da string "üìÖ **Data**: sexta-feira, 03 de outubro"
                const dateMatch = changedDate.match(/Data\*\*:\s*(.+)/);
                const date = dateMatch ? dateMatch[1].trim() : 'essa data';
                changeIntro = `‚úÖ Sim, ${date} tem vaga! Quer confirmar?`;
                console.log(`  ‚Üí Respondendo sobre data: ${date}`);

              } else if (changedService) {
                const serviceMatch = changedService.match(/Servi√ßo\*\*:\s*(.+)/);
                const service = serviceMatch ? serviceMatch[1].trim() : 'esse servi√ßo';
                changeIntro = `‚úÖ Sim, ${service} est√° dispon√≠vel! Quer confirmar?`;
                console.log(`  ‚Üí Respondendo sobre servi√ßo: ${service}`);

              } else if (changedEmployee) {
                const employeeMatch = changedEmployee.match(/Profissional\*\*:\s*(.+)/);
                const employee = employeeMatch ? employeeMatch[1].trim() : 'esse profissional';
                changeIntro = `‚úÖ Sim, ${employee} tem hor√°rio! Quer confirmar?`;
                console.log(`  ‚Üí Respondendo sobre profissional: ${employee}`);

              } else {
                changeIntro = `‚úÖ Sim, est√° dispon√≠vel! Quer confirmar?`;
                console.log(`  ‚Üí Resposta gen√©rica (nenhuma mudan√ßa espec√≠fica)`);
              }

            } else {
              // ============================================
              // RESPOSTA PARA INSTRU√á√ÉO
              // ============================================

              console.log('‚úèÔ∏è Respondendo INSTRU√á√ÉO de mudan√ßa');

              changeIntro = `‚úÖ Pode sim! Alterei:

${changesList}`;
            }
            
            confirmationMessage = `${changeIntro}

${changesList}

üìã Veja os dados atualizados do seu agendamento:

üë§ Nome: ${extractedClientName}
üì± Telefone: ${extractedClientPhone}
üíà Servi√ßo: ${serviceName}
üë®‚Äçüíº Profissional: ${employeeName}
üìÖ Data: ${formattedDate}
‚è∞ Hor√°rio: ${finalTime}

Confirma agora? Responda "SIM" ou me avise se quer alterar algo.`;
            
            console.log('üì§ Enviando confirma√ß√£o COM aviso de mudan√ßa contextualizado');
            
          } else {
            // ============================================
            // MENSAGEM PADR√ÉO (PRIMEIRA VEZ)
            // ============================================
            
            confirmationMessage = `üìã Perfeito! Vou confirmar os dados do seu agendamento:

üë§ Nome: ${extractedClientName}
üì± Telefone: ${extractedClientPhone}
üíà Servi√ßo: ${serviceName}
üë®‚Äçüíº Profissional: ${employeeName}
üìÖ Data: ${formattedDate}
‚è∞ Hor√°rio: ${finalTime}

Est√° tudo correto? Responda "SIM" para confirmar ou me avise o que precisa mudar.`;
            
            console.log('üì§ Enviando confirma√ß√£o padr√£o (primeira vez)');
          }
          
          return new Response(JSON.stringify({ 
            message: confirmationMessage,
            requiresConfirmation: true 
          }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          });
        }
        
        // Se confirmou, prosseguir com cria√ß√£o
        console.log('‚úÖ Usu√°rio confirmou dados, criando agendamento');
        
        // Valida√ß√£o adicional para TypeScript
        if (!finalTime || !finalDate || !finalEmployee || !extractedServiceId) {
          console.error('‚ùå Dados cr√≠ticos faltando na cria√ß√£o');
          return new Response(
            JSON.stringify({ 
              error: 'Dados incompletos',
              reply: 'Desculpe, houve um erro. Por favor, reinicie o agendamento.' 
            }),
            { 
              status: 400,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            }
          );
        }
        
        const endTimeMinutes = parseInt(finalTime.split(':')[0]) * 60 + 
                               parseInt(finalTime.split(':')[1]) + 
                               (selectedService?.duration_minutes || 60);
        const endTime = `${String(Math.floor(endTimeMinutes / 60)).padStart(2, '0')}:${String(endTimeMinutes % 60).padStart(2, '0')}`;

        // REVALIDA√á√ÉO CR√çTICA
        const { data: conflictCheck } = await supabase
          .from('appointments')
          .select('*')
          .eq('employee_id', finalEmployee.id)
          .eq('appointment_date', finalDate)
          .eq('start_time', finalTime)
          .neq('status', 'cancelled');

        if (conflictCheck && conflictCheck.length > 0) {
          console.log('‚ö†Ô∏è AUTO-CREATE: Conflito detectado na revalida√ß√£o');
          finalMessage = '‚ùå Ops! Esse hor√°rio acabou de ser ocupado. Por favor, escolha outro hor√°rio.';
        } else {
          // ‚úÖ LOG CR√çTICO: Verificar client_profile_id antes de criar
          console.log('üîç DADOS DO APPOINTMENT:');
          console.log('   client_name:', extractedClientName);
          console.log('   client_phone:', extractedClientPhone);
          console.log('   client_profile_id:', clientProfileId || 'NULL (visitante)');
          
          const { data: newAppt, error: apptError } = await supabase
            .from('appointments')
            .insert({
              barbershop_id: barbershopId,
              employee_id: finalEmployee.id,
              service_id: extractedServiceId,
              client_name: extractedClientName,
              client_phone: extractedClientPhone,
              client_profile_id: clientProfileId || null, // ‚úÖ Associar ao cadastro se existir
              appointment_date: finalDate,
              start_time: finalTime,
              end_time: endTime,
              status: 'pending',
              payment_status: 'pending'
            })
            .select()
            .single();

          if (apptError) {
            console.error('‚ùå AUTO-CREATE: Erro ao criar:', apptError);
            finalMessage = 'Desculpe, ocorreu um erro ao criar o agendamento. Tente novamente.';
          } else {
            console.log('‚úÖ AUTO-CREATE: Agendamento criado!', newAppt.id);
            console.log('   client_profile_id salvo:', newAppt.client_profile_id || 'NULL (visitante)');
            
            // Formatar data por extenso para mensagem de confirma√ß√£o
            const confirmDateObj = new Date(finalDate + 'T00:00:00');
            const confirmDayName = confirmDateObj.toLocaleDateString('pt-BR', { weekday: 'long' });
            const confirmDayNumber = confirmDateObj.toLocaleDateString('pt-BR', { day: '2-digit' });
            const confirmMonthName = confirmDateObj.toLocaleDateString('pt-BR', { month: 'long' });
            const confirmYear = confirmDateObj.getFullYear();
            const confirmFormattedDate = `${confirmDayName}, ${confirmDayNumber} de ${confirmMonthName} de ${confirmYear}`;
            
            finalMessage = `‚úÖ Agendamento confirmado! ${extractedClientName}, voc√™ est√° agendado(a) para **${confirmFormattedDate}** √†s ${finalTime} com ${finalEmployee.name}. At√© l√°!`;
            actionResult = { success: true, appointmentId: newAppt.id, appointment: newAppt };
            
            // Limpar data da sess√£o ap√≥s agendamento confirmado
            if (sessionId) {
              await supabase
                .from('chat_sessions')
                .update({ 
                  current_appointment_date: null,
                  status: 'completed'
                })
                .eq('id', sessionId);
              
              console.log('üßπ Data da sess√£o limpa ap√≥s agendamento confirmado');
            }
          }
        }
      } else {
        // ‚ùå DADOS INSUFICIENTES - IA N√ÉO PODE MENTIR!
        console.log('‚ö†Ô∏è AUTO-CREATE: Dados insuficientes', { 
          hasName: !!extractedClientName, 
          hasPhone: !!extractedClientPhone, 
          hasService: !!extractedServiceId,
          hasEmployee: !!finalEmployee,
          hasTime: !!finalTime,
          hasDate: !!finalDate
        });

        // üõ°Ô∏è GUARD: Verificar se IA mentiu sobre confirma√ß√£o
        const aiLied = aiMessage.toLowerCase().includes('confirmado') || 
                       aiMessage.toLowerCase().includes('agendamento criado') ||
                       aiMessage.toLowerCase().includes('est√° agendado') ||
                       aiMessage.toLowerCase().includes('agendei') ||
                       aiMessage.toLowerCase().includes('marquei') ||
                       aiMessage.toLowerCase().includes('reservado') ||
                       aiMessage.toLowerCase().includes('seu hor√°rio est√° garantido');

        if (aiLied) {
          console.log('üö® IA MENTIU! Sobrescrevendo mensagem...');
          
          // Identificar o que est√° faltando
          const missing = [];
          if (!extractedClientName) missing.push('**nome completo**');
          if (!extractedClientPhone) missing.push('**telefone com DDD (10 ou 11 d√≠gitos)**');
          if (!extractedServiceId) missing.push('**servi√ßo desejado**');
          if (!finalEmployee) missing.push('**profissional dispon√≠vel**');
          if (!finalTime) missing.push('**hor√°rio**');
          if (!finalDate) missing.push('**data**');

          // Sobrescrever com mensagem honesta
          finalMessage = `‚ö†Ô∏è Desculpe, ainda n√£o foi poss√≠vel confirmar o agendamento.

Para finalizar, preciso que voc√™ me informe: ${missing.join(', ')}.

Por favor, forne√ßa essas informa√ß√µes para eu poder confirmar seu agendamento! üòä`;
          
        }
        
        // Mensagem espec√≠fica se falta s√≥ o funcion√°rio e h√° m√∫ltiplos
        if (extractedClientName && extractedClientPhone && extractedServiceId && finalTime && finalDate && !finalEmployee && employees.length > 1) {
          finalMessage = `‚ö†Ô∏è Nenhum profissional est√° dispon√≠vel para ${services.find(s => s.id === extractedServiceId)?.name || 'este servi√ßo'} no hor√°rio ${finalTime} do dia ${new Date(finalDate).toLocaleDateString('pt-BR')}.

Profissionais dispon√≠veis: ${employees.map(e => e.name).join(', ')}.

Por favor, escolha outro hor√°rio ou especifique com qual profissional deseja agendar.`;
        }
      }
    }

    // ============= PROCESSAR A√á√ïES DA IA (FALLBACK) =============
    const actionMatch = aiMessage.match(/\{[\s\S]*?"action":\s*"create_appointment"[\s\S]*?\}/);
    
    if (actionMatch && !actionResult) {
      try {
        const actionData = JSON.parse(actionMatch[0]);
        console.log('üìù Tentando criar agendamento:', actionData);

        if (!actionData.client_name || !actionData.client_phone || !actionData.service_id) {
          finalMessage = 'Para finalizar o agendamento, preciso do seu nome completo, telefone e confirmar o servi√ßo.';
        } else {
          // REVALIDA√á√ÉO CR√çTICA
          const { data: conflictCheck } = await supabase
            .from('appointments')
            .select('*')
            .eq('employee_id', actionData.employee_id)
            .eq('appointment_date', actionData.date)
            .eq('start_time', actionData.start_time)
            .neq('status', 'cancelled');

          if (conflictCheck && conflictCheck.length > 0) {
            console.log('‚ö†Ô∏è Conflito na revalida√ß√£o!');
            finalMessage = '‚ùå Ops! Esse hor√°rio acabou de ser ocupado. Por favor, escolha outro.';
          } else {
            const { data: newAppt, error: apptError } = await supabase
              .from('appointments')
              .insert({
                barbershop_id: barbershopId,
                employee_id: actionData.employee_id,
                service_id: actionData.service_id,
                client_name: actionData.client_name,
                client_phone: actionData.client_phone,
                appointment_date: actionData.date,
                start_time: actionData.start_time,
                end_time: actionData.end_time,
                status: 'pending',
                payment_status: 'pending'
              })
              .select()
              .single();

            if (apptError) {
              console.error('‚ùå Erro ao criar:', apptError);
              finalMessage = 'Desculpe, ocorreu um erro. Tente novamente.';
            } else {
              console.log('‚úÖ Agendamento criado!', newAppt.id);
              const emp = employees.find(e => e.id === actionData.employee_id);
              
              // Formatar data por extenso para mensagem de confirma√ß√£o
              const fallbackDateObj = new Date(actionData.date + 'T00:00:00');
              const fallbackDayName = fallbackDateObj.toLocaleDateString('pt-BR', { weekday: 'long' });
              const fallbackDayNumber = fallbackDateObj.toLocaleDateString('pt-BR', { day: '2-digit' });
              const fallbackMonthName = fallbackDateObj.toLocaleDateString('pt-BR', { month: 'long' });
              const fallbackYear = fallbackDateObj.getFullYear();
              const fallbackFormattedDate = `${fallbackDayName}, ${fallbackDayNumber} de ${fallbackMonthName} de ${fallbackYear}`;
              
              finalMessage = `‚úÖ Agendamento confirmado! ${actionData.client_name}, voc√™ est√° agendado(a) para **${fallbackFormattedDate}** √†s ${actionData.start_time} com ${emp?.name}. At√© l√°!`;
              actionResult = { success: true, appointmentId: newAppt.id, appointment: newAppt };
              
              // Limpar data da sess√£o ap√≥s agendamento confirmado
              if (sessionId) {
                await supabase
                  .from('chat_sessions')
                  .update({ 
                    current_appointment_date: null,
                    status: 'completed'
                  })
                  .eq('id', sessionId);
                
                console.log('üßπ Data da sess√£o limpa ap√≥s agendamento confirmado (fallback)');
              }
              
              // Criar ou atualizar perfil tamb√©m neste fluxo
              if (actionData.client_phone && actionData.client_name) {
                const { data: existingProfile } = await supabase
                  .from('client_profiles')
                  .select('id')
                  .eq('phone', actionData.client_phone)
                  .eq('barbershop_id', barbershopId)
                  .maybeSingle();
                
                if (!existingProfile) {
                  await supabase
                    .from('client_profiles')
                    .insert({
                      barbershop_id: barbershopId,
                      name: actionData.client_name,
                      phone: actionData.client_phone,
                      phone_verified: false,
                      notes: `Agendamento via chatbot em ${new Date().toLocaleDateString('pt-BR')}`
                    });
                }
              }
            }
          }
        }
      } catch (e) {
        console.error('Erro ao processar a√ß√£o:', e);
      }
    }

    console.log('üì§ Mensagem final:', finalMessage);

    // Salvar mensagens no banco (se sessionId foi fornecido)
    if (sessionId) {
      // Salvar resposta da IA
      await supabase.from('chat_messages').insert({
        session_id: sessionId,
        role: 'assistant',
        content: finalMessage,
        metadata: { 
          timestamp: new Date().toISOString(),
          actionResult: actionResult
        }
      });
      
      // Atualizar timestamp da sess√£o
      await supabase
        .from('chat_sessions')
        .update({ last_message_at: new Date().toISOString() })
        .eq('id', sessionId);
      
      console.log(`üíæ Mensagem salva na sess√£o ${sessionId}`);
    }

    return new Response(
      JSON.stringify({ message: finalMessage, actionResult, sessionId }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    );

  } catch (error) {
    console.error('‚ùå Erro:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        message: 'Desculpe, ocorreu um erro. Tente novamente.'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});
